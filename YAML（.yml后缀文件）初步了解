YAML是一种可读性高，以数据为中心的数据序列化格式。可以表达对象（键值对），数组，标量这几种数据形式，能够被多种编程和脚本语言解析。
序列化：将自定义的对象或者其他数据进行持久化，从而方便传输和存储。一般情况下，能够序列化的数据一定能够通过反复序列化恢复。（内存一般无法永久存东西，就搞一个文件来永久保存到硬盘上方便以后给脚本读取）
基本语法：
以k: v的形式来表示键值对的关系，冒号后面必须有一个空格
#表示注释
对大小写敏感
通过缩进来表示层级关系，缩排中空格的数目不重要，只要相同阶层的元素左侧对齐就可以了
缩进只能使用空格，不能使用tab缩进键
字符串可以不用双引号
格式：
      对象和键值对：通过k: v的方式表示对象或者键值对，冒号后必须要加一个空格
Name: Astron
Sex: female
School: TJU
通过缩进来表示对象的多个属性：
People:
 Name: Astron
 Sex: female
 School: TJU
也可以写成：people： {name: Astron,sex: female}
      数组：数组（或者列表）中的元素采用-表示，以-开头的行表示构成一个数组
例：
-A
-B
-C
例：
people：
  -yyy
  -zzz
  -www
        行内表示：
 people: [yyy,zzz,www]
对象数组：
people:
-
name:yyy
age:18
-
name:zzz
age:19
使用流式表示：
people:[{name:yyy,age:18},{name:zzz,age:19}]

标量：最基本的不可再拆分的值（包括整数，浮点数，字符串，布尔值，Null，时间，日期）
例：
boolean:
 -true#大小写都以
 -fales
float:
 -3.14
 -3.25e+5#科学计数法
int 12
null:
 nodelName:name
string:123
date:2020-01-01#格式为yyyy-MM-dd
datetime:2020-01-10T15:02:08+8:00#日期和时间用T连接，+表示时区

引用：&用于建立锚点，*用于引用锚点，<<表示合并到当前数据
例：
defauts:ppp
 adapter:ppp
 host:qqq
development:
 database:mq
 <<:*defauts
 相当于：
 defauts:
  adapter:ppp
  host:qqq
development:
 database:mq
 adapter:ppp
 host:qqq
例：
-&showell steve
-clark
eve
-*showell
相当于：
-steve
-clark
-eve
-steve

YAML实现简单，解析成本低，所以特别适合在脚本语言中使用
序列化：
配置文件：写YAML比XML方便，所以YAML可以用来做配置文件，但是不同语言间的数据流转不建议使用YAML


（来源：知乎：we are)

#XML是什么
#缩进
#键值对
#序列化格式
#YAML怎样运行

